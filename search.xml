<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[编写一只高效的selenium网络爬虫]]></title>
    <url>%2F2019%2F03%2F21%2F%E7%BC%96%E5%86%99%E4%B8%80%E5%8F%AA%E9%AB%98%E6%95%88%E7%9A%84python%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[编写一只高效的selenium网络爬虫 基础知识静态网页：动态网页： 环境配置selenium：firefox selenium进阶selenium禁止加载的操作：firefox无头模式： 案例实战一：爬取网易云音乐歌手介绍12345678910111213141516171819202122232425262728293031323334353637from selenium import webdriverfrom selenium.webdriver.firefox.firefox_binary import FirefoxBinaryimport reimport timeimport jsonfrom selenium.webdriver.firefox.options import Optionsff_option = Options()ff_option.add_argument(&apos;--headless&apos;)fp = webdriver.FirefoxProfile()fp.set_preference(&quot;permissions.default.image&quot;, 2)fp.set_preference(&quot;permissions.default.stylesheet&quot;, 2)# fp.set_preference(&apos;dom.ipc.plugins.enabled.libflashplayer.so&apos;, False)# fp.set_preference(&quot;javascript.enabled&quot;,False)for line in open(&quot;signed_artists.csv&quot;, encoding=&apos;utf-8&apos;): strlist = line.split(&apos;,&apos;) artist_name = strlist[0].replace(&apos; &apos;, &apos;&apos;) artist_id = strlist[1] user_id = strlist[2] driver = webdriver.Firefox(firefox_profile=fp) driver.get(&quot;https://music.163.com/#/artist/desc?id=&quot;+str(artist_id)) driver.switch_to.frame(&apos;g_iframe&apos;) try: singer_intro_p = driver.find_element_by_xpath(&apos;/html/body/div[3]/div[1]/div/div/div[2]/div/p&apos;) singer_intro=singer_intro_p.text with open(&apos;singer_intro2.txt&apos;, &apos;a+&apos;, encoding=&apos;utf-8&apos;) as f: f.write(artist_id+&quot;#&quot;+artist_name+&quot;#&quot;+singer_intro.strip(&apos;\n&apos;)+&quot;\n&quot;) except: with open(&apos;singer_intro2.txt&apos;, &apos;a+&apos;, encoding=&apos;utf-8&apos;) as f: f.write(artist_id+&quot;#&quot;+artist_name+&quot;#&quot;+&quot;没有艺人介绍&quot;+&quot;\n&quot;) driver.close() 案例实战二：爬取网易云音乐歌单123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114# -*- coding: utf-8 -*-import tracebackfrom selenium import webdriverimport selenium.webdriver.support.ui as uifrom selenium.webdriver.common.desired_capabilities import DesiredCapabilitiesimport timeimport random# 存储为文本的子函数def write2txt(data,path): with open(path,&quot;a+&quot;,encoding=&quot;utf-8&quot;) as f: f.write(aid+&quot;\n&quot;) f.write(data+&quot;\n&quot;) f.close()# 获取该id喜欢音乐的列表def catchSongs(url_id,url): user = url_id.split(&apos;=&apos;)[-1].strip() print(&apos;excute user:&apos;,user) driver = webdriver.Firefox()#,executable_path=&apos;/Users/mrlevo/phantomjs-2.1.1-macosx/bin/phantomjs&apos;) # 注意填上路径 driver.get(url) driver.switch_to.frame(&apos;g_iframe&apos;) # 网易云的音乐元素都放在框架内！！！！先切换框架 try: song_key = 1 wrong_time = 0 while wrong_time &lt; 5: # 不断获取歌信息，假定5次获取不到值，就判无值可获取，跳出循环 try: songs = driver.find_element_by_xpath(&apos;//*[@class=&quot;j-flag&quot;]/table/tbody/tr[%s]&apos; % song_key) song_name = songs.find_element_by_css_selector(&quot;b&quot;).get_attribute(&quot;title&quot;) song_time = songs.find_element_by_css_selector(&quot;span.u-dur &quot;).text song_singer = songs.find_element_by_xpath(&quot;/html/body/div[3]/div[1]/div/div/div[2]/div[2]/div/div[1]/table/tbody/tr[%s]/td[4]/div/span&quot; % song_key).get_attribute( &quot;title&quot;) song_album = songs.find_element_by_xpath(&quot;/html/body/div[3]/div[1]/div/div/div[2]/div[2]/div/div[1]/table/tbody/tr[%s]/td[5]/div/a&quot; % song_key).get_attribute( &quot;title&quot;) new_line = song_name +&quot;#&quot; + song_time +&quot;#&quot;+ song_singer+&quot;#&quot; + song_album # info_ = songs[0].get_attribute(song_name,song_time,song_singer,song_album) # info_ = songs[0].text.strip().split(&quot;\n&quot;) # if len(info_) == 5: # info_.insert(2,&apos;None&apos;) # 没有MV选项的进行插入None # new_line = &apos;%s|&apos;%user+&apos;|&apos;.join(info_) song_key +=1 #new_line = &quot;%s|%s|%s|%s|%s|%s|%s&quot;%(user,info_[0],info_[1],info_[2],info_[3],info_[4],info_[5]) # print(new_line) with open(&quot;1_playlist/%s_playlist.txt&quot;%aid, &quot;a+&quot;, encoding=&quot;utf-8&quot;) as f: f.write(new_line + &quot;\n&quot;) # mac写入文件需要改变字符，以id命名的文件，存储在执行脚本的当前路径下， # 在win下请去掉编.endcode(&apos;utf-8&apos;) except Exception as ex: wrong_time +=1 # print ex except Exception as ex: pass finally: driver.quit()# 获取id所喜爱的音乐的urldef catchPlaylist(url): driver = webdriver.Firefox() #,executable_path=&apos;/Users/mrlevo/phantomjs-2.1.1-macosx/bin/phantomjs&apos;) # 注意填上路径 driver.get(url) driver.switch_to.frame(&apos;g_iframe&apos;) # 网易云的音乐元素都放在框架内！！！！先切换框架 try: wait = ui.WebDriverWait(driver,15) wait.until(lambda driver: driver.find_element_by_xpath(&apos;//*[@class=&quot;m-cvrlst f-cb&quot;]/li[1]/div/a&apos;)) # 根据xpath获取元素 urls = driver.find_elements_by_xpath(&apos;//*[@class=&quot;m-cvrlst f-cb&quot;]/li/div/a&apos;) favourite_url = urls[0].get_attribute(&quot;href&quot;) urls_list = [] for i in range(len(urls)): urls_list.append(urls[i].get_attribute(&quot;href&quot;)) except Exception as ex: traceback.print_exc() finally: driver.quit() # print favourite_url return urls_listif __name__ == &apos;__main__&apos;: ls=[349450752] for aid in ls: for url in [&apos;http://music.163.com/user/home?id=&apos;+str(aid)]: url_playlist = catchPlaylist(url) print(url_playlist) # 这里把自己的id替换掉，想爬谁的歌单都可以，只要你有他的id for i in range(len(url_playlist)): time.sleep(random.randint(0, 1)) # 随机休眠时间0~1秒 catchSongs(url, url_playlist[i])]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+NexT搭建Github Pages个人博客]]></title>
    <url>%2F2019%2F01%2F02%2FHexo%2BNexT%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo+NexT搭建Github Pages个人博客 之前搭建的一些web服务一直用的是阿里云9.9元/月的云服务器学生优惠（基础配置，原价100多元/月），不料读研后阿里云翻脸不认人，说本科的学生优惠到期啦、不能改学校认证啦什么的，总而言之就是不能继续用阿里云的学生优惠了，阿里云就这样错失了一位今后的优质用户（T_T）。开学后本来想把博客迁移到腾讯云的学生优惠，但是一想研究生毕业后还得再次迁移很烦，就想到了比较一劳永逸（gayhub如果被墙了就当我没说 T_T）的建设方案：在GitHub上基于hexo搭建一个静态博客。总而言之呢，学生程序员党（一个字穷）呢要有自己的觉悟，逛逛B站、喝喝肥宅快乐水、用用免费服务就能很开(ren)心(ming)了（T_T）。接下来展示程序员蓐资本主义羊毛的正确打开方式。 环境配置 安装node.js 安装git。git和GitHub的配置可以参考 安装hexo1$ npm install -g hexo-cli 建站指令 生成静态文件 1$ hexo g 发表草稿 1$ hexo publish 部署网站 1$ hexo deploy]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2F2018%2F12%2F31%2FHello-Hexo%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
